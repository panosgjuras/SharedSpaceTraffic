1+1
x<-1+1
1
x<-1
1+1
remove.packages("renv", lib="~/renv/library/R-4.2/aarch64-apple-darwin20")
library(renv)
1+1
1+1
utils::remove.packages("renv")
unlink(root, recursive = TRUE)
utils::remove.packages("renv")
remove.packages("renv", lib="~/renv/library/R-4.2/aarch64-apple-darwin20")
renv::deactivate()
library(ggplot2)
library(ggpubr)
library(corrplot)
library(gvlma)
# library(olsrr)
library(RColorBrewer)
library(psych)
library(dplyr)
library(rstudioapi)
#setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
setwd("C:/Users/panos/Desktop/github_tzouras/Shared_space_Traffic")
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
# https://leopard.tu-braunschweig.de/receive/dbbs_mods_00071535
gerdat<-read.csv2('lsaxony_procss/outdatasets/datasets_germany.csv', header=T, dec=".", sep=",")
setwd("/Desktop/github_tzouras/Shared_space_Traffic")
setwd("/Users/panosgtzouras/Desktop/github_tzouras/Shared_space_Traffic")
# https://leopard.tu-braunschweig.de/receive/dbbs_mods_00071535
gerdat<-read.csv2('lsaxony_procss/outdatasets/datasets_germany.csv', header=T, dec=".", sep=",")
# https://data.mendeley.com/datasets/n3wzjd54pj
eldat<-read.csv2('datasets/amalias_traffic_dataset.csv', header=T, dec=".", sep=",") # as it is downloaded from the data
# https://data.mendeley.com/datasets/n3wzjd54pj
eldat<-read.csv2('datasets/amalias_traffic_dataset.csv', header=T, dec=".", sep=",") # as it is downloaded from the data
# https://data.mendeley.com/datasets/n3wzjd54pj
eldat<-read.csv2('amalias_procss/outdatasets', header=T, dec=".", sep=",") # as it is downloaded from the data
# https://data.mendeley.com/datasets/n3wzjd54pj
eldat<-read.csv2('amalias_procss/outdatasets/amalias_traffic_dataset.csv', header=T, dec=".", sep=",") # as it is downloaded from the data
# NEW DATASET TO PLAY WITH
datafr_fun <- function(df, x, dats, limit){
if(dats == 'dats1'){datafr<-data.frame(case=x, flow=30*subset(df, case==x)$n_cars + 30*subset(df, case==x)$n_cyclists,
dflow = 30*subset(df, case==x)$n_cars + 30*subset(df, case==x)$n_cyclists -
mean(30*subset(df, case==x)$n_cars + 30*subset(df, case==x)$n_cyclists),
# all vehicles in veh/h, no pcu was used...
# cyclists cannot be considered separately
# since no cyclists recorded in Nafplio, Greece
speed = subset(df, case==x)$mean_car_speed,
dspeed = subset(df, case==x)$mean_car_speed - mean(subset(df, case==x)$mean_car_speed),
# deviation from the mean speed.
lspeed = subset(df, case==x)$mean_car_speed - limit,
# difference from the speed limit, compliance of drivers
comply = subset(df, case==x)$mean_car_speed/limit,
ped = 30*subset(df, case==x)$n_pedestrians,
dped = 30*subset(df, case==x)$n_pedestrians - mean(30*subset(df, case==x)$n_pedestrians),
# flow of pedestrians per hour
dcross = 30*subset(df, case==x)$ped_crossing - mean(30*subset(df, case==x)$ped_crossing),
cross = 30*subset(df, case==x)$ped_crossing)}
if(dats == 'dats2'){datafr<-data.frame(case=x, flow=60/subset(df, case==x)$headway,
dflow = (60/subset(df, case==x)$headway) - mean(60/subset(df, case==x)$headway),
# calculation flows from headways
speed = subset(df, case==x)$speed,
dspeed = subset(df, case==x)$speed - mean(subset(df, case==x)$speed),
lspeed = subset(df, case==x)$speed - limit, # there is no speed limit, suppose 30
comply = subset(df, case==x)$speed/limit,
ped = 30*subset(df, case==x)$ped,
dped = 30*subset(df, case==x)$ped - mean(30*subset(df, case==x)$ped),
dcross = 30*subset(df, case==x)$cross - mean(30*subset(df, case==x)$cross),
cross = 30*subset(df, case==x)$cross)}
# datafr<-cbind(datafr, data.frame(shared = subset(df, case==x)$shared,
#                                  # 1, if shared space, only one section
#                                  oneway = subset(df, case==x)$oneway,
#                                  lanes = subset(df, case==x)$lanes,
#                                  # 1, if oneway road
#                                  # park = subset(df, case==x)$park, # no use, all section with parking
#                                  mark = subset(df, case==x)$mark,
#                                  # 1, if road markings
#                                  trees = subset(df, case==x)$trees,
#                                  # 1, if trees
#                                  bollards = subset(df, case==x)$bollards,
#                                  # 1, if bollards
#                                  width = subset(df, case==x)$width,
#                                  # width of the pavement
#                                  cross_y = subset(df, case==x)$cross_y,
#                                  # 1, existence of courtesy crossings
#                                  s_width = subset(df, case==x)$s_width,
#                                  # 1, sidewalk width
#                                  # inters = subset(df, case==x)$inters, no use of this variable
#                                  bench = subset(df, case==x)$bench,
#                                  # 1, if benches
#                                  obst = subset(df, case==x)$obst,
#                                  # 1, if obstacles
#                                  lev_segr = subset(df, case==x)$lev_segr),
#                                  vis_segr = subset(df, case==x)$vis_segr) # 1, if level segregatioN
return(datafr)}
traf<-datafr_fun(gerdat,'fsbr', 'dats1', 20) # fsbr 20 km/h
traf<-rbind(traf, datafr_fun(gerdat,'lsho', 'dats1', 10)) # 10 km/h
traf<-rbind(traf, datafr_fun(gerdat,'mke', 'dats1', 20)) # 20 km/h
traf<-rbind(traf, datafr_fun(eldat,'shnaf','dats2', 30)) # # 30 km/h
traf$comply<-replace(traf$comply, traf$comply==0, 1)
# CORRELATIONS
corr<-function(df, x, m){ # plot correlation table funntion
corel = df
M = cor(corel)
testRes=cor.mtest(corel, conf.level=x, method = m)
corrplot(M, method = 'number', p.mat = testRes$p, sig.level = 1-x, diag=FALSE)}
# A. descriptive statistics..!
describe(subset(traf, case=='fsbr')$speed)
describe(subset(traf, case=='lsho')$speed)
describe(subset(traf, case=='mke')$speed)
describe(subset(traf, (case=='lsho' & speed!=0))$speed)
# A. descriptive statistics..!
describe(subset(traf, case=='fsbr' & speed!=0))$speed)
# A. descriptive statistics..!
describe(subset(traf, (case=='fsbr' & speed!=0))$speed)
describe(subset(traf, (case=='mke' & speed!=0))$speed)
describe(subset(traf, (case=='shnaf' & speed!=0))$speed)
